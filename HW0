CHAPTER 1

1. 
#include <unistd.h>
int main() {
  write(1, "Hi! My name is Aarya", 20);
  return 0;
}

2. 
void write_triangle(int n) {
  int count;
  for (count = 0; count < n; count++) {
    int count1;
    for (count1 = 0; count1 < count; count1++) {
      write(1, "*", 1);
    }  
    write(2, "\n", 1);
  }
}

3.

#include <unistd.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <sys/types.h>
int main() {
  mode_t mode = S_IRUSR | S_IWUSR
  int fildes = open("hello_world.txt" , O_CREAT | O_TRUNC | O_RDWR, mode)
  write(fildes, "Hi! My name is Aarya", 20);
  close(fildes);
}

4. 

int main(){
	mode_t mode = S_IRUSR | S_IWUSR;
	int fildes = open("hello_world.txt", O_CREAT | O_TRUNC | O_RDWR, mode);
	dprintf(3, "Hi! My name is Aarya");
	close(fildes);
}

5. 
write() writes into the file itself, while printf() only writes to the console and does not write into the file. Also, printf()
lets you change how the output is seen, while write() does not.


CHAPTER 2

1. There at at least 8 bits in one byte
2. char is one byte
3. int: 4, double: 8, float: 4, long: 4, long long: 8
4. 0x7fbd9d48
5. data[3] is the same as data+3
6. Because the string "hello" is a constant and can only be read, not written
7. 12
8. 5
9. sizeof("hi")
10. sizeof(4)

CHAPTER 3
1. One way is to iterate through and the other way is to use argc to get the length
2. argv[0] represents the execution name of the program ex. ./program
3. They are stored on the stack
4. sizeof(ptr) is 5 because it is the number of bytes to actually hold the character pointer
    and sizeof(array) is 6 because it is the total size that is required to hold the array
5. the function the variable is in manages the lifetime of automatic variables

CHAPTER 4
1. You can add a static variable outside of the function to change lifetime or you can use malloc()
2. heap using dynamic memory allocation while the stack if stored locally and is stored in the method of execution.
3. There is static memory in the process
4. In a good C program, for every malloc, there is a free()
5. it would fail if the program uses up all of the heap memory
6. ctime turns the time value into a character point, while time() just returns the value
7. When you use free twice, you can confused the heap because you are trying to free something 
you don't have access to since you already freed it once
8. You are trying to print something that you do not have access to since you already freed it
9. once you free it, set that pointer to NULL
10.
struct Person {
 int age;
 char* name;
 struct Person* friends[];
}

11. 
typedef strcut Person person_t;
person_t* ptr1 = (person_t*) malloc(sizeof(person_t));
person_t* ptr2 = (person_t*) malloc(sizeof(person_t));
ptr1->age = 128;
ptr2->age = 256;
ptr1->name = "Agent Smith";
ptr2->name = "Sonny Moore";
ptr1->next = ptr2;
ptr2->next = NULL;
free(ptr1);
free(ptr2);
return 0;

12.
person_t* person_create(char* akey, char* avalue) {
 printf("Creating link %s -> %s", akey, avalue);
 result -> key = akey;
 result-> value = avalue;
 return result;
}

void person_destroy(person_t *p) {
 free(p->key);
 free(p->value);
 memset(p, 0, sizeof(person_t));
 free(p);
}


CHAPTER 5
1. putchar(), puts()
2. The problem with gets() is that there is no way to tell it not to accept input that is too long for it, it can skew the output
3. 
char* data = "Hello 5 World"
char hello, world;
int five;
sscanf(data, "%s %s %d", hello, &five, world)
4. #define _GNU_SOURCE
5. 
int main() {
 file_t* file = fopen("file.csv")
 char* buffer = NULL;
 size_t capacity = 0;
 ssize_t result = getline(&buffer, &capacity, &file)
 if(result > 0 && biffer[result-1] == "\n") {
	buffer[result-1] = 0;
}
 printf("%d %s\n", result, buffer);
 free(buffer);
 return EXIT_SUCCESS;

C DEVELOPMENT
1. the flag -g is used
2. make could not understand that it has to recreate the source files 
3. tabs
4. git commit keep track of new changes and each commit has the identifier that is sha
5. git log shows you the changes in the order they were committed
6. git status shows the current state of your work and what has been committed vs not. The .giti
gnore file has files that Git should not take into consideration when it displays changes
7. git push lets you actually put in the commits from a branch to the respository, git commit only 
changes things locally, while git push actually pushes the commits to the repository.
8. It means that your local commits are not in the same state as the repository. In order to deal
with this, you can fetch changes, merge, resolve conflicts, and push again. 

   


